<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>SDRGuardian Dashboard</title>
  <script src="https://cdn.plot.ly/plotly-2.27.1.min.js"></script>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
    #charts { display: flex; flex-wrap: wrap; gap: 20px; }
    .chart-section { width: 30%; min-width: 300px; background-color: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .chart { width: 100%; height: 300px; }
    #alerts { max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; background-color: white; border-radius: 8px; }
    section { margin-bottom: 20px; }
    h3 { margin: 0 0 5px; }
    p.desc { margin: 0 0 10px; font-size: 0.9em; color: #555; }
    .sensor-status { font-size: 0.9em; margin: 5px 0; padding: 3px 6px; border-radius: 3px; display: inline-block; }
    .status-available { background-color: #d4edda; color: #155724; }
    .status-unavailable { background-color: #f8d7da; color: #721c24; }
    .status-error { background-color: #fff3cd; color: #856404; }
    .status-unsupported { background-color: #e2e3e5; color: #383d41; }
    .status-info { background-color: #d1ecf1; color: #0c5460; padding: 8px; border-radius: 4px; margin-bottom: 15px; }
    #connection-status { position: fixed; top: 10px; right: 10px; padding: 5px 10px; border-radius: 4px; font-weight: bold; }
    .connected { background-color: #d4edda; color: #155724; }
    .connecting { background-color: #fff3cd; color: #856404; }
    .disconnected { background-color: #f8d7da; color: #721c24; }
    
    /* Security Dashboard Styles */
    #security-section { background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
    #security-dashboard { display: flex; flex-wrap: wrap; gap: 20px; margin-bottom: 20px; }
    .security-panel { flex: 1; min-width: 300px; border: 1px solid #ddd; border-radius: 6px; padding: 15px; }
    .security-alerts { min-height: 100px; max-height: 150px; overflow-y: auto; margin-bottom: 15px; padding: 10px; background-color: #f9f9f9; border-radius: 4px; }
    .security-metrics { display: flex; flex-direction: column; gap: 8px; }
    .metric { display: flex; justify-content: space-between; align-items: center; }
    .metric-label { font-weight: bold; }
    .metric-value { padding: 3px 8px; border-radius: 4px; }
    .risk-low { background-color: #d4edda; color: #155724; }
    .risk-medium { background-color: #fff3cd; color: #856404; }
    .risk-high { background-color: #f8d7da; color: #721c24; }
    
    #threat-timeline { border: 1px solid #ddd; border-radius: 6px; padding: 15px; }
    #timeline-container { max-height: 200px; overflow-y: auto; }
    .timeline-event { padding: 8px; margin-bottom: 8px; border-left: 4px solid #ccc; }
    .event-critical { border-left-color: #dc3545; background-color: #f8d7da; }
    .event-warning { border-left-color: #ffc107; background-color: #fff3cd; }
    .event-info { border-left-color: #17a2b8; background-color: #d1ecf1; }
    .event-time { font-size: 0.8em; color: #666; }
    .event-title { font-weight: bold; margin: 4px 0; }
    .event-description { font-size: 0.9em; margin-bottom: 4px; }
    .event-recommendation { font-style: italic; font-size: 0.85em; color: #555; }
  </style>
</head>
<body>
  <h1>SDRGuardian Dashboard</h1>
  <div id="connection-status" class="disconnected">Disconnected</div>
  <div id="charts">
    <section class="chart-section">
      <h3>Wi-Fi Networks</h3>
      <p class="desc">Detected SSID vs signal strength (RSSI in dBm).</p>
      <p class="key"><em>Key:</em> RSSI in dBm (higher is stronger signal).</p>
      <div id="wifi-status"></div>
      <div id="wifi-chart" class="chart"></div>
    </section>
    <section class="chart-section">
      <h3>Bluetooth Devices</h3>
      <p class="desc">Discovered BLE device address vs estimated distance (meters).</p>
      <p class="key"><em>Key:</em> Estimated distance in meters (lower is closer).</p>
      <div id="bluetooth-status"></div>
      <div id="bluetooth-chart" class="chart"></div>
    </section>
    <section class="chart-section">
      <h3>IMU Acceleration</h3>
      <p class="desc">Acceleration magnitude over time (m/s²).</p>
      <p class="key"><em>Key:</em> Magnitude of acceleration vector (m/s²).</p>
      <div id="imu-status"></div>
      <div id="imu-chart" class="chart"></div>
    </section>
  </div>
  <section id="security-section">
    <h2>Security Analysis</h2>
    <div id="security-status" class="status-info">Monitoring for threats...</div>
    
    <div id="security-dashboard">
      <div class="security-panel">
        <h3>WiFi Security</h3>
        <div id="wifi-security-alerts" class="security-alerts">
          <p>No WiFi security alerts detected</p>
        </div>
        <div class="security-metrics">
          <div class="metric">
            <span class="metric-label">Evil Twin Risk:</span>
            <span id="wifi-evil-twin-risk" class="metric-value risk-low">Low</span>
          </div>
          <div class="metric">
            <span class="metric-label">Rogue AP Risk:</span>
            <span id="wifi-rogue-ap-risk" class="metric-value risk-low">Low</span>
          </div>
          <div class="metric">
            <span class="metric-label">Open Networks:</span>
            <span id="wifi-open-networks" class="metric-value">0</span>
          </div>
        </div>
      </div>
      
      <div class="security-panel">
        <h3>Bluetooth Security</h3>
        <div id="bluetooth-security-alerts" class="security-alerts">
          <p>No Bluetooth security alerts detected</p>
        </div>
        <div class="security-metrics">
          <div class="metric">
            <span class="metric-label">Proximity Threats:</span>
            <span id="bt-proximity-risk" class="metric-value risk-low">Low</span>
          </div>
          <div class="metric">
            <span class="metric-label">Unknown Devices:</span>
            <span id="bt-unknown-devices" class="metric-value">0</span>
          </div>
          <div class="metric">
            <span class="metric-label">Suspicious Names:</span>
            <span id="bt-suspicious-names" class="metric-value">0</span>
          </div>
        </div>
      </div>
    </div>
    
    <div id="threat-timeline">
      <h3>Threat Timeline</h3>
      <div id="timeline-container">
        <p>No recent security events</p>
      </div>
    </div>
  </section>

  <h2>Alerts</h2>
  <ul id="alerts"></ul>

  <h2>LLM Analysis</h2>
  <ul id="analysis"></ul>

  <h2>Summary</h2>
  <ul id="summary"></ul>

  <h2>Settings</h2>
  <form id="settings-form">
    <label>Wi-Fi Interval (s): <input type="number" id="wifi-interval" step="0.1"/></label><br/>
    <label>Bluetooth Interval (s): <input type="number" id="bluetooth-interval" step="0.1"/></label><br/>
    <label>IMU Interval (s): <input type="number" id="imu-interval" step="0.1"/></label><br/>
    <label>LLM Model: <input type="text" id="llm-model"/></label><br/>
    <label>Wi-Fi RSSI Min: <input type="number" id="wifi-rssi-min"/></label><br/>
    <label>Bluetooth RSSI Min: <input type="number" id="bt-rssi-min"/></label><br/>
    <label>IMU Accel Max: <input type="number" step="0.1" id="imu-accel-max"/></label><br/>
    <button type="submit">Save Settings</button> <span id="settings-status"></span>
  </form>
  <script>
    // Connection status management
    const connectionStatus = document.getElementById('connection-status');
    let ws = null;
    let reconnectAttempts = 0;
    const maxReconnectAttempts = 5;
    let reconnectInterval = 1000; // Start with 1 second
    
    function updateConnectionStatus(status, message = '') {
      connectionStatus.className = status;
      connectionStatus.textContent = message || status.charAt(0).toUpperCase() + status.slice(1);
      console.log(`WebSocket: ${status} ${message}`);
    }
    
    function connectWebSocket() {
      if (ws !== null && ws.readyState !== WebSocket.CLOSED) {
        console.log('WebSocket is already connected or connecting');
        return;
      }
      
      updateConnectionStatus('connecting', 'Connecting...');
      
      // Get the current protocol (http or https) and convert to ws or wss
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      // Get the host (hostname:port)
      const host = window.location.host;
      // Create the full WebSocket URL
      const wsUrl = `${protocol}//${host}/ws`;
      
      console.log(`Attempting to connect to WebSocket at: ${wsUrl}`);
      
      // Create WebSocket connection
      try {
        ws = new WebSocket(wsUrl);
        
        ws.onopen = function(event) {
          console.log('WebSocket connection established');
          updateConnectionStatus('connected');
          reconnectAttempts = 0;
          reconnectInterval = 1000;
          
          // Set up message handler immediately after connection
          setupWebSocketHandlers(ws);
          
          // Send a ping to confirm two-way communication
          ws.send(JSON.stringify({type: 'ping', timestamp: Date.now()}));
        };
        
        ws.onclose = function(event) {
          console.log('WebSocket connection closed', event);
          updateConnectionStatus('disconnected');
          
          // Attempt to reconnect with exponential backoff
          if (reconnectAttempts < maxReconnectAttempts) {
            setTimeout(function() {
              reconnectAttempts++;
              console.log(`Attempting to reconnect (${reconnectAttempts}/${maxReconnectAttempts})`);
              connectWebSocket();
              reconnectInterval *= 2; // Exponential backoff
            }, reconnectInterval);
          } else {
            updateConnectionStatus('disconnected', 'Failed to connect - please refresh page');
          }
        };
        
        ws.onerror = function(error) {
          console.error('WebSocket error:', error);
          updateConnectionStatus('disconnected', 'Connection error');
        };
      } catch (error) {
        console.error('Error creating WebSocket:', error);
        updateConnectionStatus('disconnected', 'Failed to create connection');
      }
    }
    
    // Security dashboard functions
    function updateSecurityDashboard(analysis) {
      const securityStatus = document.getElementById('security-status');
      
      // Update overall security status
      if (analysis.threat_level === 'high') {
        securityStatus.className = 'status-unavailable';
        securityStatus.textContent = 'CRITICAL SECURITY THREAT DETECTED! ' + analysis.reason;
      } else if (analysis.threat_level === 'medium') {
        securityStatus.className = 'status-error';
        securityStatus.textContent = 'Security Warning: ' + analysis.reason;
      } else {
        securityStatus.className = 'status-info';
        securityStatus.textContent = analysis.reason;
      }
      
      // Check if this is WiFi or Bluetooth related
      if (analysis.details) {
        // Update WiFi security metrics if present
        if (analysis.details.wifi) {
          const wifiAlerts = document.getElementById('wifi-security-alerts');
          const evilTwinRisk = document.getElementById('wifi-evil-twin-risk');
          const rogueAPRisk = document.getElementById('wifi-rogue-ap-risk');
          const openNetworks = document.getElementById('wifi-open-networks');
          
          // Update WiFi alerts
          if (analysis.details.wifi.alert) {
            wifiAlerts.innerHTML = `<p class="alert-${analysis.details.wifi.severity || 'info'}">${analysis.details.wifi.alert}</p>`;
          }
          
          // Update risk indicators
          if (analysis.details.wifi.evil_twin_risk) {
            evilTwinRisk.textContent = analysis.details.wifi.evil_twin_risk;
            evilTwinRisk.className = `metric-value risk-${analysis.details.wifi.evil_twin_risk.toLowerCase()}`;
          }
          
          if (analysis.details.wifi.rogue_ap_risk) {
            rogueAPRisk.textContent = analysis.details.wifi.rogue_ap_risk;
            rogueAPRisk.className = `metric-value risk-${analysis.details.wifi.rogue_ap_risk.toLowerCase()}`;
          }
          
          if (analysis.details.wifi.open_networks !== undefined) {
            openNetworks.textContent = analysis.details.wifi.open_networks;
            if (analysis.details.wifi.open_networks > 0) {
              openNetworks.className = 'metric-value risk-medium';
            } else {
              openNetworks.className = 'metric-value';
            }
          }
        }
        
        // Update Bluetooth security metrics if present
        if (analysis.details.bluetooth) {
          const btAlerts = document.getElementById('bluetooth-security-alerts');
          const proximityRisk = document.getElementById('bt-proximity-risk');
          const unknownDevices = document.getElementById('bt-unknown-devices');
          const suspiciousNames = document.getElementById('bt-suspicious-names');
          
          // Update Bluetooth alerts
          if (analysis.details.bluetooth.alert) {
            btAlerts.innerHTML = `<p class="alert-${analysis.details.bluetooth.severity || 'info'}">${analysis.details.bluetooth.alert}</p>`;
          }
          
          // Update risk indicators
          if (analysis.details.bluetooth.proximity_risk) {
            proximityRisk.textContent = analysis.details.bluetooth.proximity_risk;
            proximityRisk.className = `metric-value risk-${analysis.details.bluetooth.proximity_risk.toLowerCase()}`;
          }
          
          if (analysis.details.bluetooth.unknown_devices !== undefined) {
            unknownDevices.textContent = analysis.details.bluetooth.unknown_devices;
            if (analysis.details.bluetooth.unknown_devices > 0) {
              unknownDevices.className = 'metric-value risk-medium';
            } else {
              unknownDevices.className = 'metric-value';
            }
          }
          
          if (analysis.details.bluetooth.suspicious_names !== undefined) {
            suspiciousNames.textContent = analysis.details.bluetooth.suspicious_names;
            if (analysis.details.bluetooth.suspicious_names > 0) {
              suspiciousNames.className = 'metric-value risk-high';
            } else {
              suspiciousNames.className = 'metric-value';
            }
          }
        }
      }
    }
    
    function updateSecurityTimeline(events) {
      const timelineContainer = document.getElementById('timeline-container');
      
      // Clear previous timeline if there are new events
      if (events && events.length > 0) {
        timelineContainer.innerHTML = '';
        
        // Add each event to the timeline
        events.forEach(event => {
          const eventDiv = document.createElement('div');
          eventDiv.className = `timeline-event event-${event.level}`;
          
          const eventTime = new Date(event.timestamp * 1000).toLocaleTimeString();
          const eventTitle = event.type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          
          eventDiv.innerHTML = `
            <div class="event-time">${eventTime}</div>
            <div class="event-title">${eventTitle}</div>
            <div class="event-description">${event.description}</div>
            <div class="event-recommendation">${event.recommendation}</div>
          `;
          
          timelineContainer.appendChild(eventDiv);
        });
      }
    }
    
    // Initialize WebSocket connection when page is fully loaded
    window.addEventListener('load', function() {
      console.log('Page loaded, connecting WebSocket...');
      connectWebSocket();
    });
      
    // Make sure the message handler is assigned after connection
    setTimeout(function() {
      if (ws) {
        setupWebSocketHandlers(ws);
      } else {
        console.error('WebSocket not initialized after timeout');
      }
    }, 500);
    
    // Load current settings
    fetch('/settings')
      .then(res => res.json())
      .then(conf => {
        document.getElementById('wifi-interval').value = conf.wifi?.interval || '';
        document.getElementById('bluetooth-interval').value = conf.bluetooth?.interval || '';
        document.getElementById('imu-interval').value = conf.imu?.interval || '';
        document.getElementById('llm-model').value = conf.llm?.model || '';
        document.getElementById('wifi-rssi-min').value = conf.alerts?.thresholds?.wifi?.rssi_min ?? '';
        document.getElementById('bt-rssi-min').value = conf.alerts?.thresholds?.bluetooth?.rssi_min ?? '';
        document.getElementById('imu-accel-max').value = conf.alerts?.thresholds?.imu?.accel_max ?? '';
      });

    // Handle settings form submission
    document.getElementById('settings-form').addEventListener('submit', e => {
      e.preventDefault();
      const new_conf = {
        wifi: { interval: parseFloat(document.getElementById('wifi-interval').value) },
        bluetooth: { interval: parseFloat(document.getElementById('bluetooth-interval').value) },
        imu: { interval: parseFloat(document.getElementById('imu-interval').value) },
        llm: { model: document.getElementById('llm-model').value },
        alerts: {
          thresholds: {
            wifi: { rssi_min: parseFloat(document.getElementById('wifi-rssi-min').value) },
            bluetooth: { rssi_min: parseFloat(document.getElementById('bt-rssi-min').value) },
            imu: { accel_max: parseFloat(document.getElementById('imu-accel-max').value) },
          }
        }
      };
      fetch('/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(new_conf),
      })
      .then(res => res.json())
      .then(r => {
        document.getElementById('settings-status').textContent = r.status;
      });
    });
    // Initialize plots
    Plotly.newPlot('wifi-chart', [{ x: [], y: [], type: 'bar', text: [], textposition: 'auto' }], { title: 'Wi-Fi RSSI', xaxis: { title: 'SSID' }, yaxis: { title: 'RSSI (dBm)' } });
    Plotly.newPlot('bluetooth-chart', [{ x: [], y: [], type: 'bar', text: [], textposition: 'auto' }], { title: 'Bluetooth Distance (m)', xaxis: { title: 'Address' }, yaxis: { title: 'Distance (m)' } });
    const imuTrace = { x: [], y: [], type: 'scatter', mode: 'lines', name: 'Accel Magnitude' };
    Plotly.newPlot('imu-chart', [imuTrace], { title: 'IMU Acceleration Magnitude', xaxis: { title: 'Time' }, yaxis: { title: 'Magnitude' } });

    // Handle incoming WebSocket messages
    function handleWebSocketMessage(event) {
      console.log('WebSocket message received');
      try {
        const msg = JSON.parse(event.data);
        console.log('Parsed message:', msg);
        
        // Handle different message types
        if (!msg) {
          console.error('Received empty message');
          return;
        }
        
        // Log the received message with more detail
        console.log('Received message type:', msg.record ? msg.record.sensor : (msg.status || 'unknown'));
        console.log('Message content:', JSON.stringify(msg, null, 2));
        
        // Debug the structure of the message
        if (msg.record) {
          console.log('Record structure:', Object.keys(msg.record));
          if (msg.record.sensor === 'wifi') {
            console.log('WiFi networks structure:', msg.record.networks);
            console.log('WiFi hardware status:', msg.record.hardware_status);
          } else if (msg.record.sensor === 'bluetooth') {
            console.log('Bluetooth devices structure:', msg.record.devices);
            console.log('Bluetooth hardware status:', msg.record.hardware_status);
          } else if (msg.record.sensor === 'imu') {
            console.log('IMU data structure:', msg.record.accel);
            console.log('IMU hardware status:', msg.record.hardware_status);
          }
        }
        
        // Handle status messages (connection confirmation, etc.)
        if (msg.status && !msg.record) {
          console.log('Status message received:', msg.status);
          return;
        }
        
        // Handle summary
      if (msg.type === 'summary') {
        const summaryEl = document.getElementById('summary');
        // Clear previous summary
        summaryEl.innerHTML = '';
        
        // Add each event to the summary
        if (msg.summary && msg.summary.events && msg.summary.events.length > 0) {
          // Update the security timeline with events
          updateSecurityTimeline(msg.summary.events);
          
          msg.summary.events.forEach(event => {
            const li = document.createElement('li');
            li.innerHTML = `<strong>${event.type}:</strong> ${event.description} (Level: ${event.level})<br>Recommendation: ${event.recommendation}`;
            li.style.color = event.level === 'critical' ? 'red' : event.level === 'warning' ? 'orange' : 'blue';
            summaryEl.appendChild(li);
          });
        } else {
          const li = document.createElement('li');
          li.textContent = 'No significant events detected.';
          summaryEl.appendChild(li);
        }
      }
      return;
        }
        
        // Handle sensor data messages
        if (!msg.record) {
          console.log('Message has no record data, ignoring for chart updates');
{{ ... }}
          // Show hardware unavailable message
          showHardwareUnavailableMessage('imu', status, rec.error || 'No acceleration data');
          // Keep any existing real data visible
        }
      }
      
      // Handle sensor data messages
      if (rec && rec.sensor) {
        // Update Wi-Fi chart
        if (rec.sensor === 'wifi') {
          // Update hardware status display
          const wifiStatusElem = document.getElementById('wifi-status');
          const status = rec.hardware_status || 'unknown';
          wifiStatusElem.innerHTML = `<span class="sensor-status status-${status}">Hardware: ${status}</span>`;
          if (rec.error) {
            wifiStatusElem.innerHTML += `<br><span class="error-message">${rec.error}</span>`;
          }
          
          // Only update chart if we have data
          console.log('WiFi networks:', rec.networks);
          if (rec.networks && Array.isArray(rec.networks) && rec.networks.length > 0) {
            const ssids = rec.networks.map(n => n.ssid || 'Unknown');
            const rssis = rec.networks.map(n => n.rssi);
            console.log('Updating WiFi chart with SSIDs:', ssids, 'RSSIs:', rssis);
            
            // Check if we have valid data
            if (ssids.length > 0 && rssis.length > 0 && !rssis.some(r => r === undefined || r === null)) {
              Plotly.react('wifi-chart', [{ x: ssids, y: rssis, type: 'bar', text: rssis.map(String), textposition: 'auto' }]);
            } else {
              console.log('Invalid WiFi data, showing unavailable message');
              showHardwareUnavailableMessage('wifi', status, rec.error);
            }
          } else {
            console.log('No WiFi networks data to display');
            // Show hardware unavailable message or clear the chart
            showHardwareUnavailableMessage('wifi', status, rec.error || 'No networks found');
          }
        }
        // Update Bluetooth chart with estimated distances
        else if (rec.sensor === 'bluetooth') {
          // Update hardware status display
          const btStatusElem = document.getElementById('bluetooth-status');
          const status = rec.hardware_status || 'unknown';
          btStatusElem.innerHTML = `<span class="sensor-status status-${status}">Hardware: ${status}</span>`;
          if (rec.error) {
            btStatusElem.innerHTML += `<br><span class="error-message">${rec.error}</span>`;
          }
          
          // Only update chart if we have data
          console.log('Bluetooth devices:', rec.devices);
          if (rec.devices && Array.isArray(rec.devices) && rec.devices.length > 0) {
            const labels = rec.devices.map(d => d.address || 'Unknown');
            const distances = rec.devices.map(d => {
              // Estimate distance (m) from RSSI using path-loss model
              const txPower = -59; // assumed RSSI at 1 meter
              const pathLossExp = 2; // environmental factor
              // Check if RSSI is a valid number and not -100 (default value)
              if (typeof d.rssi === 'number' && d.rssi !== -100) {
                return Math.pow(10, (txPower - d.rssi) / (10 * pathLossExp));
              } else {
                // If RSSI is -100 (default value), show a more reasonable distance estimate
                return 10; // Default to 10 meters when RSSI is unavailable
              }
            });
            console.log('Updating Bluetooth chart with addresses:', labels, 'distances:', distances);
            
            // Check if we have valid data
            if (labels.length > 0 && distances.length > 0 && !distances.some(d => d === undefined || d === null)) {
              Plotly.react('bluetooth-chart', [{ x: labels, y: distances, type: 'bar', text: distances.map(d => d.toFixed(2)), textposition: 'auto' }]);
            } else {
              console.log('Invalid Bluetooth data, showing unavailable message');
              showHardwareUnavailableMessage('bluetooth', status, rec.error);
            }
          } else {
            console.log('No Bluetooth devices data to display');
            // Show hardware unavailable message
            showHardwareUnavailableMessage('bluetooth', status, rec.error || 'No devices found');
          }
        }
        // Update IMU chart
        else if (rec.sensor === 'imu') {
          // Update hardware status display
          const imuStatusElem = document.getElementById('imu-status');
          const status = rec.hardware_status || 'unknown';
          imuStatusElem.innerHTML = `<span class="sensor-status status-${status}">Hardware: ${status}</span>`;
          if (rec.error) {
            imuStatusElem.innerHTML += `<br><span class="error-message">${rec.error}</span>`;
          }
          
          // Only update chart if we have acceleration data
          console.log('IMU data:', rec.accel);
          if (rec.accel && typeof rec.accel === 'object') {
            const a = rec.accel;
            // Make sure we have valid x, y, z values
            if (typeof a.x === 'number' && typeof a.y === 'number' && typeof a.z === 'number') {
              const mag = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
              const t = new Date(rec.timestamp * 1000).toLocaleTimeString();
              console.log('Updating IMU chart with time:', t, 'magnitude:', mag);
              
              // Initialize the trace if it doesn't exist
              if (!imuTrace.x || !imuTrace.y) {
                imuTrace.x = [];
                imuTrace.y = [];
              }
              
              imuTrace.x.push(t);
              imuTrace.y.push(mag);
              
              try {
                Plotly.extendTraces('imu-chart', { x: [[t]], y: [[mag]] }, [0]);
                if (imuTrace.x.length > 50) {
                  imuTrace.x.shift();
                  imuTrace.y.shift();
                  Plotly.relayout('imu-chart', { 'xaxis.range': [imuTrace.x[0], imuTrace.x[imuTrace.x.length - 1]] });
                }
              } catch (error) {
                console.error('Error updating IMU chart:', error);
                // If extending fails, recreate the chart
                Plotly.react('imu-chart', [{ x: imuTrace.x, y: imuTrace.y, type: 'scatter', mode: 'lines', name: 'Accel Magnitude' }], 
                  { title: 'IMU Acceleration Magnitude', xaxis: { title: 'Time' }, yaxis: { title: 'Magnitude' } });
              }
            } else {
              console.log('IMU data has invalid acceleration values:', a);
              showHardwareUnavailableMessage('imu', status, rec.error || 'Invalid acceleration data');
            }
          } else {
            console.log('No IMU acceleration data to display');
            // Show hardware unavailable message
            showHardwareUnavailableMessage('imu', status, rec.error || 'No acceleration data');
            // Keep any existing real data visible
          }
        }
      }
      // Display LLM analysis (show all analyses,      // Handle LLM analysis
      if (msg.type === 'analysis') {
        const analysisEl = document.getElementById('analysis');
        // Clear previous analysis
        analysisEl.innerHTML = '';
        
        // Add the new analysis
        const li = document.createElement('li');
        if (msg.analysis.anomaly) {
          li.innerHTML = `<strong>ANOMALY DETECTED:</strong> ${msg.analysis.reason} (Threat Level: ${msg.analysis.threat_level})<br>Recommendation: ${msg.analysis.recommendation}`;
          li.style.color = msg.analysis.threat_level === 'high' ? 'red' : msg.analysis.threat_level === 'medium' ? 'orange' : 'black';
          
          // Update security dashboard
          updateSecurityDashboard(msg.analysis);
        } else {
          li.innerHTML = `<strong>No anomalies detected.</strong> ${msg.analysis.reason}`;
        }
        analysisEl.appendChild(li);
      }
      // Display alerts
      const alerts = msg.alerts || [];
      const alertsElem = document.getElementById('alerts');
      alerts.forEach(a => {
        const li = document.createElement('li');
        const ts = new Date(a.timestamp * 1000).toLocaleTimeString();
        const txt = a.issue || a.reason || JSON.stringify(a);
        li.textContent = `[${ts}] ${a.sensor}: ${txt}`;
        alertsElem.prepend(li);
      });
      } catch (error) {
        console.error('Error processing WebSocket message:', error);
      }
    }
    
    // This function will be called when the WebSocket is created
    function setupWebSocketHandlers(socket) {
      if (!socket) return;
      
      console.log('Setting up WebSocket message handler');
      socket.onmessage = handleWebSocketMessage;
    }
    
    // Function to display a clear message when hardware is unavailable
    function showHardwareUnavailableMessage(sensorType, status, errorMsg) {
      console.log(`Hardware status for ${sensorType}: ${status}, error: ${errorMsg || 'none'}`);
      
      // Add a clear warning message to the chart
      const chartId = `${sensorType}-chart`;
      const chartElement = document.getElementById(chartId);
      
      if (chartElement) {
        // Clear any existing data
        if (sensorType === 'wifi') {
          Plotly.react(chartId, [{ x: [], y: [], type: 'bar', text: [], textposition: 'auto' }]);
        } else if (sensorType === 'bluetooth') {
          Plotly.react(chartId, [{ x: [], y: [], type: 'bar', text: [], textposition: 'auto' }]);
        } else if (sensorType === 'imu' && (!imuTrace.x || imuTrace.x.length === 0)) {
          // Only clear IMU if there's no data
          Plotly.react(chartId, [{ x: [], y: [], type: 'scatter', mode: 'lines' }]);
        }
        
        // Determine the message to display
        let message = 'NO DATA AVAILABLE';
        if (status === 'error') {
          message += ` - ${errorMsg || 'HARDWARE ERROR'}`;
        } else if (status === 'unavailable') {
          message += ' - HARDWARE UNAVAILABLE';
        } else if (status === 'unsupported') {
          message += ' - HARDWARE UNSUPPORTED';
        }
        
        // Add an annotation to the center of the chart
        try {
          Plotly.relayout(chartId, {
            annotations: [{
              text: message,
              showarrow: false,
              font: {
                size: 16,
                color: '#721c24'
              },
              xref: 'paper',
              yref: 'paper',
              x: 0.5,
              y: 0.5,
              xanchor: 'center',
              yanchor: 'middle'
            }]
          });
        } catch (error) {
          console.error(`Error adding annotation to ${sensorType} chart:`, error);
        }
        
        return true;
      }
      return false;
    }
  </script>
</body>
</html>